VERSION 5.00
Begin {AC0714F6-3D04-11D1-AE7D-00A0C90F26F4} dCodeValidator 
   ClientHeight    =   10020
   ClientLeft      =   1740
   ClientTop       =   1545
   ClientWidth     =   10650
   _ExtentX        =   18785
   _ExtentY        =   17674
   _Version        =   393216
   Description     =   $"Connect.dsx":0000
   DisplayName     =   "Code Logic Flow Validator"
   AppName         =   "Visual Basic"
   AppVer          =   "Visual Basic 6.0"
   LoadName        =   "None"
   RegLocation     =   "HKEY_CURRENT_USER\Software\Microsoft\Visual Basic\6.0"
   CmdLineSupport  =   -1  'True
End
Attribute VB_Name = "dCodeValidator"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
' ************************************************
' * Code Viewer Engine                                                        *
' * Code by: Roger Willcocks                                                *
' * Code Date: 27 Oct 2000                                                 *
' * Email:  rogerw@dtl.co.nz                     *
' * -----------------------                      *
' *                                              *
' *                                              *
' * This code was designed to view VB code       *
' * in a tree node setup.                        *
' *                                              *
' * The purpose of this code was to provide an   *
' * easy of detecting invalid code structure.    *
' *                                              *
' * Please enjoy the code and send me your       *
' * comments and suggestions at rogerw@dtl.co.nz *
' ************************************************

' Notes:
'

' DO NOT TRY TO USE ON THIS PROJECT, IT THROWS A TYPE ERROR AND
' UNREGISTERS THE ADDIN

' You will notice on frmAddIn there is an object called imgSmall
' This image list must be initiated with the tree node before
' It will work.  To do that, you would right click on the tree node
' And select properties.  On the image list combo box under the General
' Tab, choose the Image list available.
' In this example, you shouldn't have to do that.  This is a reference
' If you decide to use a tree node in the future.

' To keep my node structure in order, you will notice that I
' Declared 3 different nodes to simplify sorting things out.

' The related line number is used as the end of the key for the node
' If extra lines have been added, etc, the are prefixed with different characters
' or extra characters (not necessarily 1 lead character)
' Additions/mistakes are show in red
' End/Loop/Wend type instructions are in grey, to reduce their interference
'    I left them in to add readability
' Code section headers (Sub/While/etc) are in blue

' Goes to a line by clicking on it in the treeview
' expands tree if there are errors in it, otherwise leaves it closed

' All the code in this module is generated by the Add-In template, excepting
' the 'Set' statements in the Show method
Option Explicit



Public FormDisplayed          As Boolean
Public VBInstance             As VBIDE.VBE
Private mcbMenuCommandBar         As Object
Public mdocAddIn   As docAddin
Private gwinWindow   As VBIDE.Window
Public WithEvents MenuHandler As CommandBarEvents          'command bar event handler
Attribute MenuHandler.VB_VarHelpID = -1
Private Const guidCodeValidator$ = "{AC3075C1-B54F-11d3-943A-00A0CC5F7B23}"

Sub Hide()
    On Error Resume Next
    FormDisplayed = False
    gwinWindow.Visible = False
End Sub

Sub Show()
    On Error Resume Next
    If Not VBInstance Is Nothing Then
        Set mdocAddIn.VBInstance = VBInstance
        Set mdocAddIn.Connect = Me
        FormDisplayed = True
        gwinWindow.Visible = True
    Else
        MsgBox "no active VB Instance resolved"
    End If
End Sub

'------------------------------------------------------
'this method adds the Add-In to VB
'------------------------------------------------------
Private Sub AddinInstance_OnConnection(ByVal Application As Object, ByVal ConnectMode As AddInDesignerObjects.ext_ConnectMode, ByVal AddInInst As Object, custom() As Variant)
    On Error GoTo error_handler
    
    'save the vb instance
    Set VBInstance = Application
    'this is a good place to set a breakpoint and
    'test various addin objects, properties and methods

    If ConnectMode = ext_cm_External Then
        'Used by the wizard toolbar to start this wizard
        Me.Show
    Else
        Set gwinWindow = VBInstance.Windows.CreateToolWindow(AddInInst, "CodeValidator.docAddIn", "Code Validator", guidCodeValidator, mdocAddIn)
        Set mcbMenuCommandBar = AddToAddInCommandBar("Code Validator")
        'sink the event
        Set Me.MenuHandler = VBInstance.Events.CommandBarEvents(mcbMenuCommandBar)
    End If
  
    If ConnectMode = ext_cm_AfterStartup Then
            Me.Show
    End If
  
    Exit Sub
    
error_handler:
    
    MsgBox Err.Description
    
End Sub

'------------------------------------------------------
'this method removes the Add-In from VB
'------------------------------------------------------
Private Sub AddinInstance_OnDisconnection(ByVal RemoveMode As AddInDesignerObjects.ext_DisconnectMode, custom() As Variant)
    On Error Resume Next
    
    'delete the command bar entry
    mcbMenuCommandBar.Delete
    
    'shut down the Add-In
    If FormDisplayed Then
        SaveSetting App.title, "Settings", "DisplayOnConnect", "1"
        FormDisplayed = False
    Else
        SaveSetting App.title, "Settings", "DisplayOnConnect", "0"
    End If
    
    Unload mdocAddIn
    Set mdocAddIn = Nothing

End Sub
'this event fires when the menu is clicked in the IDE
Private Sub MenuHandler_Click(ByVal CommandBarControl As Object, handled As Boolean, CancelDefault As Boolean)
    Me.Show
End Sub

Function AddToAddInCommandBar(sCaption As String) As Object
    Dim cbMenuCommandBar As Object 'command bar object
    Dim cbMenu As Object
  
    On Error GoTo AddToAddInCommandBarErr
    
    'see if we can find the Add-Ins menu
    Set cbMenu = VBInstance.CommandBars("Add-Ins")
    If cbMenu Is Nothing Then
        'not available so we fail
        Exit Function
    End If
    
    'add it to the command bar
    Set cbMenuCommandBar = cbMenu.Controls.Add(1)
    'set the caption
    cbMenuCommandBar.Caption = sCaption
    
    Set AddToAddInCommandBar = cbMenuCommandBar
    Exit Function
    
AddToAddInCommandBarErr:

End Function
